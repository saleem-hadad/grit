"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

scalar Json @scalar(class: "MLL\\GraphQLScalars\\JSON")

"Indicates what fields are available at the top level of a query operation."
type Query {
#    "Find a single user by an identifying attribute."
#    user(
#      "Search by primary key."
#      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
#
#      "Search by email address."
#      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#    ): User @find

#    "List multiple users."
#    users(
#      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#      name: String @where(operator: "like")
#    ): [User!]! @paginate(defaultCount: 10)

    "List multiple achievements."
    achievements: [Achievement!]! @paginate(defaultCount: 200)
    competencies: [Competency!]! @all

    achievementsTrend(range: String!): Json
    competenciesReport(range: String!): Json
}

"Achievement model"
type Achievement {
    "Unique primary key."
    id: ID!

    "The summary of the achievement and impact"
    summary: String!

    "When the achievement was done."
    date: Date!

    "The metric that was achieved."
    metrics: [Metric!]! @belongsToMany

    "The links to the evidence of the achievement."
    links: [Link!]! @hasMany
}


"Metric model"
type Metric {
    "Unique primary key."
    id: ID!

    "The metric name"
    name: String!

    "The metric description"
    description: String!

    "The competency that the metric belongs to"
    competency: Competency! @belongsTo
}

"Link model"
type Link {
    "Unique primary key."
    id: ID!

    "The label of the link"
    label: String!

    "The url of the link"
    url: String!
}

"Competency model"
type Competency {
    "Unique primary key."
    id: ID!

    "The competency name"
    name: String!

    "The area that the competency belongs to"
    area: Area! @belongsTo

    "The metrics that belong to the competency"
    metrics: [Metric!]! @hasMany
}

"Area model"
type Area {
    "Unique primary key."
    id: ID!

    "The area name"
    name: String!
}


type Mutation {
    "Create a new achievement"
    createAchievement(
        "The summary of the achievement and impact"
        summary: String!

        "When the achievement was done."
        date: Date!

        "The metric that was achieved."
        metrics: [ID!]!

        "The links to the evidence of the achievement."
        links: String
    ): Achievement!
}